{"ast":null,"code":"var _jsxFileName = \"/home/differentsyntax/GitHub/TrieVisualizer/src/components/inputWords.js\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { TextField, Button, MenuItem } from '@material-ui/core';\nimport DisplayDiagram from '../components/displayDiagram'; // import countries from '../data/country'\n// import majors from '../data/majors'\n\nimport swal from 'sweetalert';\nimport { render } from '@testing-library/react';\nconst formURL = \"http://localhost:5000/addWords/save\";\n\nconst InputWords = () => /*#__PURE__*/React.createElement(\"div\", {\n  id: \"input-word\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 2\n  }\n}, /*#__PURE__*/React.createElement(Formik, {\n  initialValues: {\n    wordsArray: ''\n  },\n  validationSchema: validationSchema,\n  onSubmit: (data, {\n    setSubmitting,\n    resetForm\n  }) => {\n    setSubmitting(true); // make async call\n    // alert(JSON.stringify(data, null, 2));\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('post', formURL, true);\n    xhr.setRequestHeader('Accept', 'application/json; charset=utf-8');\n    xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n    xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n    xhr.send(JSON.stringify(data));\n\n    xhr.onloadend = response => {\n      if (response.target.status === 200) {\n        console.log(response.target.response); // this.setState({data: JSON.stringify(response.target.response)});\n\n        render();\n        {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 10\n            }\n          }, /*#__PURE__*/React.createElement(\"h1\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 11\n            }\n          }, \"The Score is this.\"));\n        }\n      } // \tresetForm();\n      //  swal(\"Your info is in! We'll reach out to you soon!\")\n      // } else {\n      // \tswal(\"There was some error! Please try again!\")\n      // \tconsole.error(JSON.parse(response));\n      // }\n\n    };\n\n    setSubmitting(false);\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }\n}, ({\n  isSubmitting,\n  errors,\n  touched,\n  setFieldValue\n}) => /*#__PURE__*/React.createElement(Form, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 6\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"input-words-field\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Field, {\n  fullWidth: true,\n  label: \"app, application, shop, shopper, awe, awesome...\",\n  margin: \"normal\",\n  placeholder: \"app, application, shop, shopper, awe, awesome\",\n  variant: \"outlined\",\n  type: \"name\",\n  name: \"wordsArray\",\n  as: TextField,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 8\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"errors\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 8\n  }\n}, /*#__PURE__*/React.createElement(ErrorMessage, {\n  name: \"wordsArray\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 8\n  }\n}))), /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  id: \"input-words-submit\",\n  fullWidth: true,\n  variant: \"outlined\",\n  color: \"primary\",\n  type: \"submit\",\n  disabled: isSubmitting,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 8\n  }\n}, \"Submit\"))))));\n\nconst validationSchema = yup.object().shape({\n  wordsArray: yup.string('*should be a string').required('*required field')\n});\nexport default InputWords;","map":{"version":3,"sources":["/home/differentsyntax/GitHub/TrieVisualizer/src/components/inputWords.js"],"names":["React","Formik","Form","Field","ErrorMessage","yup","TextField","Button","MenuItem","DisplayDiagram","swal","render","formURL","InputWords","wordsArray","validationSchema","data","setSubmitting","resetForm","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","onloadend","response","target","status","console","log","isSubmitting","errors","touched","setFieldValue","object","shape","string","required"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,mBAA5C;AACA,OAAOC,cAAP,MAA2B,8BAA3B,C,CACA;AACA;;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AAEA,MAAMC,OAAO,GAAG,qCAAhB;;AAEA,MAAMC,UAAU,GAAG,mBAClB;AAAK,EAAA,EAAE,EAAG,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACC,oBAAC,MAAD;AACC,EAAA,aAAa,EAAE;AACbC,IAAAA,UAAU,EAAE;AADC,GADhB;AAIC,EAAA,gBAAgB,EAAEC,gBAJnB;AAKC,EAAA,QAAQ,EAAE,CAACC,IAAD,EAAO;AAACC,IAAAA,aAAD;AAAgBC,IAAAA;AAAhB,GAAP,KAAuC;AAE/CD,IAAAA,aAAa,CAAC,IAAD,CAAb,CAF+C,CAG/C;AACA;;AACA,QAAIE,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,MAAT,EAAiBT,OAAjB,EAA0B,IAA1B;AACAO,IAAAA,GAAG,CAACG,gBAAJ,CAAqB,QAArB,EAA+B,iCAA/B;AACAH,IAAAA,GAAG,CAACG,gBAAJ,CAAqB,cAArB,EAAqC,iCAArC;AACAH,IAAAA,GAAG,CAACG,gBAAJ,CAAqB,6BAArB,EAAoD,GAApD;AACAH,IAAAA,GAAG,CAACI,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAAT;;AAEAG,IAAAA,GAAG,CAACO,SAAJ,GAAgBC,QAAQ,IAAI;AAE3B,UAAIA,QAAQ,CAACC,MAAT,CAAgBC,MAAhB,KAA2B,GAA/B,EAAoC;AACnCC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACC,MAAT,CAAgBD,QAA5B,EADmC,CAEnC;;AACAhB,QAAAA,MAAM;AACN;AACC,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADD,CADD;AAKA;AACD,OAb0B,CAc3B;AACA;AACA;AACA;AACA;AACA;;AACA,KApBD;;AAsBAM,IAAAA,aAAa,CAAC,KAAD,CAAb;AACI,GAxCP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA0CK,CAAC;AAACe,EAAAA,YAAD;AAAeC,EAAAA,MAAf;AAAuBC,EAAAA,OAAvB;AAAgCC,EAAAA;AAAhC,CAAD,kBACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACC;AAAK,EAAA,SAAS,EAAG,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACC,oBAAC,KAAD;AAAO,EAAA,SAAS,MAAhB;AAAiB,EAAA,KAAK,EAAG,kDAAzB;AAA4E,EAAA,MAAM,EAAG,QAArF;AAA8F,EAAA,WAAW,EAAC,+CAA1G;AAA0J,EAAA,OAAO,EAAG,UAApK;AAA+K,EAAA,IAAI,EAAC,MAApL;AAA2L,EAAA,IAAI,EAAC,YAAhM;AAA6M,EAAA,EAAE,EAAE7B,SAAjN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,eAEC;AAAK,EAAA,SAAS,EAAG,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACA,oBAAC,YAAD;AAAc,EAAA,IAAI,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADA,CAFD,CADD,eAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACC,oBAAC,MAAD;AAAQ,EAAA,EAAE,EAAG,oBAAb;AAAkC,EAAA,SAAS,MAA3C;AAA4C,EAAA,OAAO,EAAC,UAApD;AAA+D,EAAA,KAAK,EAAG,SAAvE;AAAiF,EAAA,IAAI,EAAC,QAAtF;AAA+F,EAAA,QAAQ,EAAE0B,YAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,CAPD,CADG,CA3CN,CADD,CADD;;AAiEA,MAAMjB,gBAAgB,GAAGV,GAAG,CAAC+B,MAAJ,GAAaC,KAAb,CACxB;AACCvB,EAAAA,UAAU,EAAET,GAAG,CACdiC,MADW,CACJ,qBADI,EAEXC,QAFW,CAEF,iBAFE;AADb,CADwB,CAAzB;AASA,eAAe1B,UAAf","sourcesContent":["import React from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport * as yup from 'yup'\nimport { TextField, Button, MenuItem } from '@material-ui/core'\nimport DisplayDiagram from '../components/displayDiagram'\n// import countries from '../data/country'\n// import majors from '../data/majors'\nimport swal from 'sweetalert';\nimport { render } from '@testing-library/react'\n\nconst formURL = \"http://localhost:5000/addWords/save\"\n\nconst InputWords = () => (\n\t<div id = \"input-word\">\n\t\t<Formik\n\t\t\tinitialValues={{\n\t\t\t\t\twordsArray: ''\n\t\t\t}}\n\t\t\tvalidationSchema={validationSchema}\n\t\t\tonSubmit={(data, {setSubmitting, resetForm }) => {\n\t\t\t\t\t\n\t\t\t\t\tsetSubmitting(true)\n\t\t\t\t\t// make async call\n\t\t\t\t\t// alert(JSON.stringify(data, null, 2));\n\t\t\t\t\tvar xhr = new XMLHttpRequest()\n\t\t\t\t\txhr.open('post', formURL, true)\n\t\t\t\t\txhr.setRequestHeader('Accept', 'application/json; charset=utf-8')\n\t\t\t\t\txhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8')\n\t\t\t\t\txhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\")\n\t\t\t\t\txhr.send(JSON.stringify(data))\n\n\t\t\t\t\txhr.onloadend = response => {\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (response.target.status === 200) {\n\t\t\t\t\t\t\tconsole.log(response.target.response);\n\t\t\t\t\t\t\t// this.setState({data: JSON.stringify(response.target.response)});\n\t\t\t\t\t\t\trender()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h1>The Score is this.</h1>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// \tresetForm();\n\t\t\t\t\t\t//  swal(\"Your info is in! We'll reach out to you soon!\")\n\t\t\t\t\t\t// } else {\n\t\t\t\t\t\t// \tswal(\"There was some error! Please try again!\")\n\t\t\t\t\t\t// \tconsole.error(JSON.parse(response));\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\n\t\t\t\t\tsetSubmitting(false)\n        }}\n    >\n      {({isSubmitting, errors, touched, setFieldValue}) => (\n        <Form>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className = \"input-words-field\">\n\t\t\t\t\t\t\t<Field fullWidth label = \"app, application, shop, shopper, awe, awesome...\" margin = \"normal\" placeholder=\"app, application, shop, shopper, awe, awesome\" variant = \"outlined\" type=\"name\" name=\"wordsArray\" as={TextField}/>\n\t\t\t\t\t\t\t<div className = \"errors\">\n\t\t\t\t\t\t\t<ErrorMessage name=\"wordsArray\"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Button id = \"input-words-submit\" fullWidth variant=\"outlined\" color = \"primary\" type=\"submit\" disabled={isSubmitting}>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n      )}\n    </Formik>\n\t</div>\n)\n\nconst validationSchema = yup.object().shape(\n\t{\n\t\twordsArray: yup\n\t\t.string('*should be a string')\n\t\t.required('*required field')\n\t}\n)\n\n\nexport default InputWords"]},"metadata":{},"sourceType":"module"}