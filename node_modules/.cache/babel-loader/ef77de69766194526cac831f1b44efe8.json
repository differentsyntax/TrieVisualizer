{"ast":null,"code":"var _jsxFileName = \"/home/differentsyntax/GitHub/TrieVisualizer/src/components/inputWords.js\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { TextField, Button, MenuItem } from '@material-ui/core'; // import Autocomplete from '@material-ui/lab/Autocomplete'\n// import countries from '../data/country'\n// import majors from '../data/majors'\n\nimport swal from 'sweetalert';\nconst formURL = \"https://q4c0oh5zd6.execute-api.us-east-1.amazonaws.com/Prod/submitForm\";\n\nconst InputWords = () => /*#__PURE__*/React.createElement(\"div\", {\n  id: \"student\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 2\n  }\n}, /*#__PURE__*/React.createElement(Formik, {\n  initialValues: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    city: '',\n    state: '',\n    country: '',\n    resume: '',\n    major: '',\n    school: 'Drexel University',\n    linkedin: '',\n    github: '',\n    workauth: '',\n    visaspons: '',\n    gentext: ''\n  },\n  validationSchema: validationSchema,\n  onSubmit: (data, {\n    setSubmitting,\n    resetForm\n  }) => {\n    setSubmitting(true); // make async call\n    // alert(JSON.stringify(data, null, 2));\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('post', formURL, true);\n    xhr.setRequestHeader('Accept', 'application/json; charset=utf-8');\n    xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n    xhr.send(JSON.stringify(data));\n\n    xhr.onloadend = response => {\n      if (response.target.status === 200) {\n        resetForm();\n        swal(\"Your info is in! We'll reach out to you soon!\");\n      } else {\n        swal(\"There was some error! Please try again!\");\n        console.error(JSON.parse(response));\n      }\n    };\n\n    setSubmitting(false);\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }\n}, ({\n  isSubmitting,\n  errors,\n  touched,\n  setFieldValue\n}) => /*#__PURE__*/React.createElement(Form, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 6\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"student-field\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Field, {\n  fullWidth: true,\n  label: \"First Name\",\n  margin: \"normal\",\n  required: true,\n  variant: \"outlined\",\n  type: \"name\",\n  name: \"firstName\",\n  as: TextField,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 8\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"errors\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 8\n  }\n}, /*#__PURE__*/React.createElement(ErrorMessage, {\n  name: \"firstName\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 8\n  }\n}))), /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  id: \"studentform-submit\",\n  fullWidth: true,\n  variant: \"outlined\",\n  color: \"primary\",\n  type: \"submit\",\n  disabled: isSubmitting,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 8\n  }\n}, \"Submit\"))))));\n\nconst validationSchema = yup.object().shape({\n  firstName: yup.string('*should be a string').required('*required field'),\n  lastName: yup.string('*should be a string').required('*required field'),\n  email: yup.string().email('*not a valid email').required('*required field'),\n  phone: yup.string().required('*required field'),\n  city: yup.string('*should be a string').required('*required field'),\n  state: yup.string('*should be a string').required('*required field'),\n  country: yup.string('*should be a valid country').required('*required field'),\n  resume: yup.string('*should be a valid link').required('*required field'),\n  major: yup.string('should be a valid major').required('*required field')\n});\nexport default InputWords;","map":{"version":3,"sources":["/home/differentsyntax/GitHub/TrieVisualizer/src/components/inputWords.js"],"names":["React","Formik","Form","Field","ErrorMessage","yup","TextField","Button","MenuItem","swal","formURL","InputWords","firstName","lastName","email","phone","city","state","country","resume","major","school","linkedin","github","workauth","visaspons","gentext","validationSchema","data","setSubmitting","resetForm","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","onloadend","response","target","status","console","error","parse","isSubmitting","errors","touched","setFieldValue","object","shape","string","required"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport * as yup from 'yup'\nimport { TextField, Button, MenuItem } from '@material-ui/core'\n// import Autocomplete from '@material-ui/lab/Autocomplete'\n// import countries from '../data/country'\n// import majors from '../data/majors'\nimport swal from 'sweetalert';\n\nconst formURL = \"https://q4c0oh5zd6.execute-api.us-east-1.amazonaws.com/Prod/submitForm\"\n\nconst InputWords = () => (\n\t<div id = \"student\">\n\t\t<Formik\n\t\t\tinitialValues={{\n\t\t\t\t\tfirstName: '',\n\t\t\t\t\tlastName: '',\n\t\t\t\t\temail: '',\n\t\t\t\t\tphone: '',\n\t\t\t\t\tcity: '',\n\t\t\t\t\tstate: '',\n\t\t\t\t\tcountry: '',\n\t\t\t\t\tresume: '',\n\t\t\t\t\tmajor: '',\n\t\t\t\t\tschool: 'Drexel University',\n\t\t\t\t\tlinkedin: '',\n\t\t\t\t\tgithub: '',\n\t\t\t\t\tworkauth: '',\n\t\t\t\t\tvisaspons: '',\n\t\t\t\t\tgentext: ''\n\t\t\t}}\n\t\t\tvalidationSchema={validationSchema}\n\t\t\tonSubmit={(data, {setSubmitting, resetForm }) => {\n\t\t\t\t\t\n\t\t\t\t\tsetSubmitting(true)\n\t\t\t\t\t// make async call\n\t\t\t\t\t// alert(JSON.stringify(data, null, 2));\n\t\t\t\t\tvar xhr = new XMLHttpRequest()\n\t\t\t\t\txhr.open('post', formURL, true)\n\t\t\t\t\txhr.setRequestHeader('Accept', 'application/json; charset=utf-8')\n\t\t\t\t\txhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8')\n\t\t\t\t\txhr.send(JSON.stringify(data))\n\n\t\t\t\t\txhr.onloadend = response => {\n\t\t\t\t\t\tif (response.target.status === 200) {\n\t\t\t\t\t\t\tresetForm();\n\t\t\t\t\t\t\tswal(\"Your info is in! We'll reach out to you soon!\")\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tswal(\"There was some error! Please try again!\")\n\t\t\t\t\t\t\tconsole.error(JSON.parse(response));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsetSubmitting(false)\n        }}\n    >\n      {({isSubmitting, errors, touched, setFieldValue}) => (\n        <Form>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className = \"student-field\">\n\t\t\t\t\t\t\t<Field fullWidth label = \"First Name\" margin = \"normal\" required variant = \"outlined\" type=\"name\" name=\"firstName\" as={TextField}/>\n\t\t\t\t\t\t\t<div className = \"errors\">\n\t\t\t\t\t\t\t<ErrorMessage name=\"firstName\"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Button id = \"studentform-submit\" fullWidth variant=\"outlined\" color = \"primary\" type=\"submit\" disabled={isSubmitting}>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n      )}\n    </Formik>\n\t</div>\n)\n\nconst validationSchema = yup.object().shape(\n\t{\n\t\tfirstName: yup\n\t\t.string('*should be a string')\n\t\t.required('*required field')\n\t,\n\t\n\t\tlastName: yup\n\t\t.string('*should be a string')\n\t\t.required('*required field')\n\t,\n\t\n\t\temail: yup\n\t\t.string()\n\t\t.email('*not a valid email')\n\t\t.required('*required field')\n\t,\n\t\n\t\tphone: yup\n\t\t.string()\n\t\t.required('*required field')\n\t,\n\t\n\t\tcity: yup\n\t\t.string('*should be a string')\n\t\t.required('*required field')\n\t,\n\t\n\t\tstate: yup\n\t\t.string('*should be a string')\n\t\t.required('*required field')\n\t,\n\t\n\t\tcountry: yup\n\t\t.string('*should be a valid country')\n\t\t.required('*required field')\n\t,\n\t\tresume: yup\n\t\t.string('*should be a valid link')\n\t\t.required('*required field')\n\t,\n\t\tmajor: yup\n\t\t.string('should be a valid major')\n\t\t.required('*required field')\n\t}\n)\n\n\nexport default InputWords"]},"metadata":{},"sourceType":"module"}